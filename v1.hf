#url /api/v1
#type api
#base https://w3id.org/oc/index/coci
#title REST API for COCI, the OpenCitations Index of Crossref open DOI-to-DOI references
#description This document describe the REST API for accessing the data stored in [COCI](https://w3id.org/oc/index/coci) hosted by [OpenCitations](http://opencitations.net). Currently, this API implements three basic operations, to retrieve the citation data for all the references to other works appearing in a particular bibliographic entity, or the citation data for all the references appearing in other works to a particular bibliographic entity, given the DOI of a bibliographic entity, or to retrieve citation data about a particular citation identified by means of its [Open Citation Identifier (OCI)](https://opencitations.wordpress.com/2018/03/12/citations-as-first-class-data-entities-open-citation-identifiers/).

All the present operations return either a JSON document (default) or a CSV document according to the mimetype specified in the `Accept` header of the request. The fields returned by these operations are:

* *oci*: the Open Citation Identifier (OCI) of the citation in consideration;
* *citing*: the DOI of the citing entity;
* *cited*: the DOI of the cited entity;
* *creation*: the creation date of the citation according to the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601) `YYYY-MM-DD`, which corresponds to the publication date of the citing entity;
* *timespan*: the interval between the publication date of the cited entity and the publication date of the citing entity, expressed using the [XSD duration format](https://www.w3.org/TR/xmlschema11-2/#duration) `PnYnMnD`.

If you would like to suggest an additional operation to be included in this API, please use the [issue tracker](https://github.com/opencitations/api-coci/issues) of the COCI API available on GitHub.
#version Version 1.0.0
#contacts [contact@opencitations.net](mailto:contact@opencitations.net)
#license This document is licensed with a [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/legalcode), while the REST API itself has been created using [RAMOSE](https://github.com/opencitations/ramose), the *Restful API Manager Over SPARQL Endpoints* created by [Silvio Peroni](https://orcid.org/0000-0003-0530-4305), which is licensed with an [ISC license](https://opensource.org/licenses/ISC).
#endpoint https://w3id.org/oc/index/coci/sparql
#addon cociapi

#url /references/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> encode(doi)
#postprocess decode_doi(citing, cited)
#method get
#description This operation retrieves the citation data for all the references to other works appearing in the bibliographic entity identified by the input DOI.
#call /references/10.1186/1756-8722-6-59
#output_json [
    {
        "oci": "02001010806360107050663080702026306630509-0200101080636102703040309",
        "citing": "10.1186/1756-8722-6-59",
        "cited": "10.1186/ar3439",
        "creation": "2013",
        "timespan": "P2Y"
    },
    {
        "oci": "02001010806360107050663080702026306630509-0200101080636102704000806",
        "citing": "10.1186/1756-8722-6-59",
        "cited": "10.1186/ar4086",
        "creation": "2013",
        "timespan": "P1Y"
    },
    {
        "oci": "02001010806360107050663080702026306630509-020010200003619122437020001023704023707090006",
        "citing": "10.1186/1756-8722-6-59",
        "cited": "10.1200/jco.2012.42.7906",
        "creation": "2013",
        "timespan": "P0Y"
    },
    {
        "oci": "02001010806360107050663080702026306630509-02003010009360008080300010805370200010237060604070907",
        "citing": "10.1186/1756-8722-6-59",
        "cited": "10.3109/08830185.2012.664797",
        "creation": "2013",
        "timespan": "P0Y"
    }
]
#field_type str(oci) str(citing) str(cited) datetime(creation) duration(timespan)
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?oci ?citing ?cited ?creation ?timespan
WHERE {
    GRAPH <https://w3id.org/oc/index/coci/> {
        BIND(<http://dx.doi.org/[[doi]]> as ?citing_iri) .
        ?citing_iri ^cito:hasCitingEntity ?oci_iri .
        ?oci_iri
            cito:hasCitedEntity ?cited_iri ;
            cito:hasCitationCreationDate ?creation ;
            cito:hasCitationTimeSpan ?timespan .
        BIND(STRAFTER(str(?citing_iri), "http://dx.doi.org/") AS ?citing)
        BIND(STRAFTER(str(?cited_iri), "http://dx.doi.org/") AS ?cited)
        BIND(STRAFTER(str(?oci_iri), "/ci/") AS ?oci)
    }
}
LIMIT 10000

#url /citations/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> encode(doi)
#postprocess decode_doi(citing, cited)
#method get
#description This operation retrieves the citation data for all the references appearing in other works to the bibliographic entity identified by the input DOI.
#call /citations/10.1002/adfm.201505328
#output_json [
    {
        "oci": "0200100030836231029271431221029283702000106370908-02001000002361013152237020001050005030208",
        "citing": "10.1038/natrevmats.2016.98",
        "cited": "10.1002/adfm.201505328",
        "creation": "2017-01-17",
        "timespan": "P11M"
    },
    {
        "oci": "02001000002361013221037020001070002060708-02001000002361013152237020001050005030208",
        "citing": "10.1002/adma.201702678",
        "cited": "10.1002/adfm.201505328",
        "creation": "2017-07-25",
        "timespan": "P1Y5M8D"
    },
    {
        "oci": "020010003083623142314271634370200010737010005-02001000002361013152237020001050005030208",
        "citing": "10.1038/nenergy.2017.105",
        "cited": "10.1002/adfm.201505328",
        "creation": "2017-07-10",
        "timespan": "P1Y4M23D"
    }
]
#field_type str(oci) str(citing) str(cited) datetime(creation) duration(timespan)
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?oci ?citing ?cited ?creation ?timespan
WHERE {
    GRAPH <https://w3id.org/oc/index/coci/> {
        BIND(<http://dx.doi.org/[[doi]]> as ?cited_iri) .
        ?cited_iri ^cito:hasCitedEntity ?oci_iri .
        ?oci_iri
            cito:hasCitingEntity ?citing_iri ;
            cito:hasCitationCreationDate ?creation ;
            cito:hasCitationTimeSpan ?timespan .
        BIND(STRAFTER(str(?citing_iri), "http://dx.doi.org/") AS ?citing)
        BIND(STRAFTER(str(?cited_iri), "http://dx.doi.org/") AS ?cited)
        BIND(STRAFTER(str(?oci_iri), "/ci/") AS ?oci)
    }
}
LIMIT 10000

#url /citation/{oci}
#type operation
#oci str([0-9]+-[0-9]+)
#method get
#postprocess decode_doi(citing, cited)
#description This operation retrieves the citation data for the citation identified by the input Open Citation Identifier (OCI).

The Open Citation Identifier is a globally unique persistent identifier for bibliographic citations, which has a simple structure: the lower-case letters "oci" followed by a colon, followed by two numbers separated by a dash. For example, `oci:1-18` is a valid OCI.

It is worth mentioning that, in this REST operation, the prefix "oci:" **should not** be specified, and only the dash-separated numbers of the OCI should be provided, as shown in the example below.
#call /citation/02001010806360107050663080702026306630509-0200101080636102704000806
#output_json [
    {
        "oci": "02001010806360107050663080702026306630509-0200101080636102704000806",
        "citing": "10.1186/1756-8722-6-59",
        "cited": "10.1186/ar4086",
        "creation": "2013",
        "timespan": "P1Y"
    }
]
#field_type str(oci) str(citing) str(cited) datetime(creation) duration(timespan)
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?oci ?citing ?cited ?creation ?timespan
WHERE {
    GRAPH <https://w3id.org/oc/index/coci/> {
        BIND(<https://w3id.org/oc/index/coci/ci/[[oci]]> as ?oci_iri) .
        ?oci_iri
            cito:hasCitingEntity ?citing_iri ;
            cito:hasCitedEntity ?cited_iri ;
            cito:hasCitationCreationDate ?creation ;
            cito:hasCitationTimeSpan ?timespan .
        BIND(STRAFTER(str(?citing_iri), "http://dx.doi.org/") AS ?citing)
        BIND(STRAFTER(str(?cited_iri), "http://dx.doi.org/") AS ?cited)
        BIND(STRAFTER(str(?oci_iri), "/ci/") AS ?oci)
    }
}
LIMIT 10000
